[
  {
    "note!": "This is a limited grammar without multiple statement support",
    "left": "Start",
    "right": ["Equivline"],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "Equivline",
    "right": ["=", "Term"],
    "php": "$term = new MP_Prefixeq($term1);\n$term->position = ['start' => $term0->position, 'start-row' => $term0->line, 'start-col' => $term0->column, 'end' => $term1->position['end']];",
    "ts": "term = new MP_Prefixeq(term1);"
  },
  {
    "left": "Equivline",
    "right": ["let", "TopOp"],
    "php": "$term = new MP_Let($term1);\n$term->position = ['start' => $term0->position, 'start-row' => $term0->line, 'start-col' => $term0->column, 'end' => $term1->position['end']];",
    "ts": "term = new MP_Let(term1);"
  },
  {
    "left": "Equivline",
    "right": ["Statement"],
    "php": "$term = new MP_Statement($term0, []);\n$term->position = array_merge($term0->position, []);",
    "ts": "term = new MPStatement(term0, []);"
  },
	 {
    "left": "List",
    "right": ["[", "StatementNullList", "]"],
    "php": "$term = new MP_List($term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term2->position + 1];",
    "ts": "term = new MPList(term1);\nendposition = term2;"
  },
  {
    "left": "Set",
    "right": ["{", "StatementNullList", "}"],
    "php": "$term = new MP_Set($term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term2->position + 1];",
    "ts": "term = new MPSet(term1);\nendposition = term2;"
  },
  {
    "left": "Group",
    "right": ["(", "StatementNullList", ")"],
    "php": "$term = new MP_Group($term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term2->position + 1];",
    "ts": "term = new MPGroup(term1);\nendposition = term2;"
  },
	{
		"left": "StatementNullList",
		"right": ["Statement", "TermList"],
    "php": "$term = array_merge([$term0], $term1);",
    "ts": "term = [term0].concat($term1);"
	},
	{
		"left": "StatementNullList",
		"right": [null],
    "php": "$term = [];",
    "ts": "term = [];"
	},
	{
		"left": "TermList",
		"right": ["LIST_SEP", "Statement", "TermList"],
    "php": "$term = array_merge([$term1], $term2);",
    "ts": "term = [term1].concat($term2);"
	},
	{
		"left": "TermList",
		"right": [null],
    "php": "$term = [];",
    "ts": "term = [];"
	},
	{
		"left": "Statement",
		"right": ["TopOp"],
    "php": "$term = $term0;",
    "ts": "term = term0;"
	},
  {
    "left": "Term",
    "right": ["BOOL"],
    "php": "$term = new MP_Boolean($term0->value);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term0->position + $term0->length];",
    "ts": "term = new MPBoolean(term0.value);"
  },
  {
    "left": "Term",
    "right": ["INT"],
    "php": "$term = new MP_Integer($term0->value, $term0->value);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term0->position + $term0->length];",
    "ts": "term = new MPInteger(term0.value, term0.value);"
  },
  {
    "left": "Term",
    "right": ["FLOAT"],
    "php": "$term = new MP_Float($term0->value, $term0->value);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term0->position + $term0->length];",
    "ts": "term = new MPFloat(term0.value, term0.value);"
  },
  {
    "left": "Term",
    "right": ["CallOrIndex?"],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "IndexableOrCallable",
    "right": ["STRING"],
    "php": "$term = new MP_String($term0->value);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term0->position + $term0->length];",
    "ts": "term = new MPString(term0.value);"
  },
  {
    "left": "IndexableOrCallable",
    "right": ["ID"],
    "php": "$term = new MP_Identifier($term0->value);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term0->position + $term0->length];",
    "ts": "term = new MPIdentifier(term0.value);"
  },
  {
    "left": "IndexableOrCallable",
    "right": ["List"],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "IndexableOrCallable",
    "right": ["Set"],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "IndexableOrCallable",
    "right": ["Group"],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "CallOrIndex?",
    "right": ["IndexableOrCallable", "ListsOrGroups"],
    "php": "$term = $term0;\nwhile (count($term1) > 0) {\n>$item = array_shift($term1);\n>if ($item instanceof MP_List) {\n>>$term = new MP_Indexing($term, [$item]);\n>} else if ($item instanceof MP_Group) {\n>>$term = new MP_FunctionCall($term, $item->items);\n>}\n>$term->position['start'] = $term0->position['start'];\n>$term->position['start-col'] = $term0->position['start-col'];\n>$term->position['start-row'] = $term0->position['start-row'];\n>$term->position['end'] = $item->position['end'];\n}",
    "ts": "term = term0;\nwhile (term1.length > 0) {\n>item = term1.shift();\n>if (item instanceof MP_List) {\n>>term = new MPIndexing(term, [item]);\n>} else if ($item instanceof MP_Group) {\n>>term = new MPFunctionCall(term, item,items);\n>}\n>endposition = item;\n>term.position['start'] = term0.position['start'];\n>term.position['start-col'] = term0.position['start-col'];\n>term.position['start-row'] = term0.position['start-row'];\n>term.position['end'] = item.position['end'];\n}"
  },
  {
    "left": "ListsOrGroups",
    "right": ["List", "ListsOrGroups"],
    "php": "$term = array_merge([$term0], $term1);",
    "ts": "term = [term0].concat($term1);"
  },
  {
    "left": "ListsOrGroups",
    "right": [null],
    "php": "$term = [];",
    "ts": "term = [];"
  },
  {
    "left": "ListsOrGroups",
    "right": ["Group", "ListsOrGroups"],
    "php": "$term = array_merge([$term0], $term1);",
    "ts": "term = [term0].concat($term1);"
  },
  {
    "left": "TopOp",
    "right": [
      "OpInfix"
    ],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "TopOp",
    "right": [
      "OpSuffix"
    ],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "TopOp",
    "right": [
      "OpPrefix"
    ],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "TopOp",
    "right": [
      "Term"
    ],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "TopOp",
    "right": [
      "Abs"
    ],
    "php": "$term = $term0;",
    "ts": "term = term0;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "-",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "+",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "+-",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "#pm#",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "''",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "'",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "not",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "note!": "The space is intentional.",
    "left": "OpPrefix",
    "right": [
      "not ",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "?? ",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "? ",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "?",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpPrefix",
    "right": [
      "UNARY_RECIP",
      "TopOp"
    ],
    "php": "$term = new MP_PrefixOp($term0->value, $term1);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term1->position['end']];",
    "ts": "term = new MPPrefixOp(term0.value, term1);\nendposition = term1;"
  },
  {
    "left": "OpSuffix",
    "right": [
      "TopOp",
      "!"
    ],
    "php": "$term = new MP_PostfixOp($term1->value, $term0);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term1->position + $term1->length];",
    "ts": "term = new MPPostfixOp(term1.value, term0);\nendposition = term1;"
  },
  {
    "left": "OpSuffix",
    "right": [
      "TopOp",
      "!!"
    ],
    "php": "$term = new MP_PostfixOp($term1->value, $term0);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term1->position + $term1->length];",
    "ts": "term = new MPPostfixOp(term1.value, term0);\nendposition = term1;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "#",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "#pm#",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "**",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "^^",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "^",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      ".",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "*",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];\nif ($term1->note !== null) {\n>$term->position[$term1->note === 'inserted with whitespace' ? 'fixspaces' : 'insertstars'] = true;\n}",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;\nif (term1.length > 5) {\n>term.position[term1[5] === 'inserted with whitespace' ? 'fixspaces' : 'insertstars'] = true;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "/",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "-",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "+",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "+-",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "and",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "or",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "nounand",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "nounor",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "::=",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      ":=",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "::",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      ":",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "<=",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "<",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      ">=",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      ">",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "=",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "~",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "nounadd",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "nounsub",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "nounpow",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "noundiv",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "blankmult",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "STACKpmOPT",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "OpInfix",
    "right": [
      "TopOp",
      "nouneq",
      "TopOp"
    ],
    "php": "$term = new MP_Operation($term1->value, $term0, $term2);\n$term->position = ['start' => $term0->position['start'], 'start-col' => $term0->position['start-col'], 'start-row' => $term0->position['start-row'], 'end' => $term2->position['end']];",
    "ts": "term = new MPOperation(term1.value, term0, term2);\nendposition = term2;"
  },
  {
    "left": "Abs",
    "right": [
      "|",
      "TopOp",
      "|"
    ],
    "php": "$term = new MP_FunctionCall(new MP_Identifier('abs'), [$term1]);\n$term->position = ['start' => $term0->position, 'start-col' => $term0->column, 'start-row' => $term0->line, 'end' => $term2->position + 1];",
    "ts": "term = new MPFunctionCall(new MPIdentifier('abs'), [term1]);\nendposition = term2;"
  }
]